/* tslint:disable */
/* eslint-disable */
/**
 * Gong API
 * <h2>Overview</h2> <p> The Gong API allows you to: </p> <ol> <li> Receive the following information from Gong: <ol type=\"a\"> <li> Your company\'s <a href=\"#tag--Calls\">calls</a> in Gong </li> <li> Your company\'s <a href=\"#tag--Users\">users</a> in Gong </li> <li> Your company\'s user <a href=\"#tag--Stats\">stats</a> in Gong </li> <li> Your company\'s user <a href=\"#tag--Settings\">settings</a> in Gong </li> <li> Your company\'s <a href=\"#tag--Library\">libraries</a> in Gong </li> </ol></li> <li> <a href=\"#post-/v2/calls\">Upload</a> new or  <a href=\"#put-/v2/calls/-id-/media\">update</a>  call recordings in Gong, in order to support cases where you have an internal system that records  calls or obtains them from a third-party entity. </li> <li> <a href=\"#post-/v2/data-privacy/erase-data-for-email-address\">Data Privacy</a>:  Delete users and all their associated elements.</li> <li> Upload <a href=\"#tag--CRM\">CRM</a> data into Gong.  </li> </ol> <p>Check <a href=\"https://app.gong.io/company/api-authentication?currentTab=MY_API_TAB\">here</a> what\'s your base URL for all API calls. </p> <h2>Authentication</h2>  <p> There are two ways to retrieve credentials to the Gong Public API: </p> <ol><li>Retrieve Manually:<br> <p> In the <a href=\"https://app.gong.io/company/api\">Gong API Page</a> (you must be a technical administrator in Gong), click \"Create\" to receive an <b>Access Key</b>  and an <b>Access Key Secret</b>.<br> </p> <p> Use the Basic Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc7617.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Basic &lt;token&gt;</code><br> </p> <p> To create the basic token, combine the <b>Access Key</b> and the <b>Access Key Secret</b> with  colon (:) and then encode in Base64 as following:<br> <code>Base64(&lt;accessKey&gt; : &lt;accessKeySecret&gt;)</code><br><br> </p></li> <li>Retrieve through OAuth<br> <p> To obtain the Bearer token, follow the steps described in the <a target=\"_blank\" href=\"https://help.gong.io/hc/en-us/articles/13944551222157-Create-an-app-for-Gong\">Gong OAuth Guide</a>. <br></p> <p> After obtaining the token, use the Bearer Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc6750.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Bearer &lt;token&gt;</code> </p> </li></ol> <h2>Limits</h2>  <p> By default Gong limits your company\'s access to the service to 3 API calls per second, and 10,000 API calls per day. </p> <p> When the rate of API calls exceeds these limits an HTTP status code <b>429</b> is returned and a <b>Retry-After</b> header indicates  how many seconds to wait before making a new request. </p><p> If required, contact <a target=\"_blank\" href=\"https://help.gong.io\">help.gong.io</a> to change these limits. </p>  <h2>Cursors</h2>  <p> Some API calls that return a list are limited in the amount of records they may return, so multiple API calls may be  required to bring all records. Such an API call also returns a <b>records</b> field, which contains the number of records  in the current page, the current page number and the total number of records. </p> <p> In cases where the total number of records exceeds the number of records thus far retrieved, the <b>records</b> field will also  contain a <b>cursor</b> field which can be used to access the next page of records. To retrieve the next page, repeat the API call with  the <b>cursor</b> value as supplied by the previous API call. All other request inputs should remain the same. </p> <h2>Forward Compatibility</h2>  <p> When coding a system to accept Gong data, take into account that Gong may, without prior warning, add fields to the JSON output.  It is recommended to future proof your code so that it disregards all JSON fields you don\'t actually use.  </p><p></p>
 *
 * The version of the OpenAPI document: V2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBasicAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * StatsApi - axios parameter creator
 * @export
 */
export const StatsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieve all the answers for the scorecards that were reviewed during a specified date range, for calls that took place during a specified date range, for specific scorecards or for specific reviewed users.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:scorecards\'.
         * @summary Retrieve answered scorecards for applicable reviewed users or scorecards for a date range (/v2/stats/activity/scorecards)
         * @param {PublicApiBaseRequestV2AnsweredScorecardsFilter} publicApiBaseRequestV2AnsweredScorecardsFilter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnsweredScorecards: async (publicApiBaseRequestV2AnsweredScorecardsFilter, options = {}) => {
            // verify required parameter 'publicApiBaseRequestV2AnsweredScorecardsFilter' is not null or undefined
            assertParamExists('listAnsweredScorecards', 'publicApiBaseRequestV2AnsweredScorecardsFilter', publicApiBaseRequestV2AnsweredScorecardsFilter);
            const localVarPath = `/v2/stats/activity/scorecards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(publicApiBaseRequestV2AnsweredScorecardsFilter, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns interaction stats for users based on calls that have Whisper turned on.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:interaction\'.
         * @summary Retrieve interaction stats for applicable users by date (/v2/stats/interaction)
         * @param {PublicApiBaseRequestV2MultipleUsersWithDates} publicApiBaseRequestV2MultipleUsersWithDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInteractionStats: async (publicApiBaseRequestV2MultipleUsersWithDates, options = {}) => {
            // verify required parameter 'publicApiBaseRequestV2MultipleUsersWithDates' is not null or undefined
            assertParamExists('listInteractionStats', 'publicApiBaseRequestV2MultipleUsersWithDates', publicApiBaseRequestV2MultipleUsersWithDates);
            const localVarPath = `/v2/stats/interaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(publicApiBaseRequestV2MultipleUsersWithDates, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the activity of multiple users within the Gong system during a defined period. Given the period, this endpoint returns multiple records, one for each user, with an applicable activity during the period. Each record includes statistics about the user\'s activity.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions\'.
         * @summary Retrieve aggregated activity for defined users by date (/v2/stats/activity/aggregate)
         * @param {PublicApiBaseRequestV2MultipleUsersWithDates} publicApiBaseRequestV2MultipleUsersWithDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultipleUsersAggregateActivity: async (publicApiBaseRequestV2MultipleUsersWithDates, options = {}) => {
            // verify required parameter 'publicApiBaseRequestV2MultipleUsersWithDates' is not null or undefined
            assertParamExists('listMultipleUsersAggregateActivity', 'publicApiBaseRequestV2MultipleUsersWithDates', publicApiBaseRequestV2MultipleUsersWithDates);
            const localVarPath = `/v2/stats/activity/aggregate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(publicApiBaseRequestV2MultipleUsersWithDates, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the aggregated activity of multiple users within the Gong system for each time period within the defined date range. This endpoint returns multiple records, one for each user. For each user there are items for every time period in the date range, including statistics about the user\'s activity. Records are returned only for users with activity in the range.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions\'.
         * @summary Retrieve aggregated activity for defined users by a date range with grouping in time periods (/v2/stats/activity/aggregate-by-period)
         * @param {RequestWithTimePeriod} requestWithTimePeriod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultipleUsersAggregateByPeriod: async (requestWithTimePeriod, options = {}) => {
            // verify required parameter 'requestWithTimePeriod' is not null or undefined
            assertParamExists('listMultipleUsersAggregateByPeriod', 'requestWithTimePeriod', requestWithTimePeriod);
            const localVarPath = `/v2/stats/activity/aggregate-by-period`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(requestWithTimePeriod, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the daily activity of multiple users within the Gong system for a range of dates. This endpoint returns records including statistics about each user\'s activity, on the daily level. Records are returned only for users with activity in the range.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions:detailed\'.
         * @summary Retrieve daily activity for applicable users for a date range (/v2/stats/activity/day-by-day)
         * @param {PublicApiBaseRequestV2MultipleUsersWithDates} publicApiBaseRequestV2MultipleUsersWithDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultipleUsersDayByDayActivity: async (publicApiBaseRequestV2MultipleUsersWithDates, options = {}) => {
            // verify required parameter 'publicApiBaseRequestV2MultipleUsersWithDates' is not null or undefined
            assertParamExists('listMultipleUsersDayByDayActivity', 'publicApiBaseRequestV2MultipleUsersWithDates', publicApiBaseRequestV2MultipleUsersWithDates);
            const localVarPath = `/v2/stats/activity/day-by-day`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(publicApiBaseRequestV2MultipleUsersWithDates, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StatsApi - functional programming interface
 * @export
 */
export const StatsApiFp = function (configuration) {
    const localVarAxiosParamCreator = StatsApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieve all the answers for the scorecards that were reviewed during a specified date range, for calls that took place during a specified date range, for specific scorecards or for specific reviewed users.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:scorecards\'.
         * @summary Retrieve answered scorecards for applicable reviewed users or scorecards for a date range (/v2/stats/activity/scorecards)
         * @param {PublicApiBaseRequestV2AnsweredScorecardsFilter} publicApiBaseRequestV2AnsweredScorecardsFilter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAnsweredScorecards(publicApiBaseRequestV2AnsweredScorecardsFilter, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAnsweredScorecards(publicApiBaseRequestV2AnsweredScorecardsFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsApi.listAnsweredScorecards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns interaction stats for users based on calls that have Whisper turned on.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:interaction\'.
         * @summary Retrieve interaction stats for applicable users by date (/v2/stats/interaction)
         * @param {PublicApiBaseRequestV2MultipleUsersWithDates} publicApiBaseRequestV2MultipleUsersWithDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInteractionStats(publicApiBaseRequestV2MultipleUsersWithDates, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInteractionStats(publicApiBaseRequestV2MultipleUsersWithDates, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsApi.listInteractionStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lists the activity of multiple users within the Gong system during a defined period. Given the period, this endpoint returns multiple records, one for each user, with an applicable activity during the period. Each record includes statistics about the user\'s activity.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions\'.
         * @summary Retrieve aggregated activity for defined users by date (/v2/stats/activity/aggregate)
         * @param {PublicApiBaseRequestV2MultipleUsersWithDates} publicApiBaseRequestV2MultipleUsersWithDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMultipleUsersAggregateActivity(publicApiBaseRequestV2MultipleUsersWithDates, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMultipleUsersAggregateActivity(publicApiBaseRequestV2MultipleUsersWithDates, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsApi.listMultipleUsersAggregateActivity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lists the aggregated activity of multiple users within the Gong system for each time period within the defined date range. This endpoint returns multiple records, one for each user. For each user there are items for every time period in the date range, including statistics about the user\'s activity. Records are returned only for users with activity in the range.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions\'.
         * @summary Retrieve aggregated activity for defined users by a date range with grouping in time periods (/v2/stats/activity/aggregate-by-period)
         * @param {RequestWithTimePeriod} requestWithTimePeriod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMultipleUsersAggregateByPeriod(requestWithTimePeriod, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMultipleUsersAggregateByPeriod(requestWithTimePeriod, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsApi.listMultipleUsersAggregateByPeriod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the daily activity of multiple users within the Gong system for a range of dates. This endpoint returns records including statistics about each user\'s activity, on the daily level. Records are returned only for users with activity in the range.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions:detailed\'.
         * @summary Retrieve daily activity for applicable users for a date range (/v2/stats/activity/day-by-day)
         * @param {PublicApiBaseRequestV2MultipleUsersWithDates} publicApiBaseRequestV2MultipleUsersWithDates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMultipleUsersDayByDayActivity(publicApiBaseRequestV2MultipleUsersWithDates, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMultipleUsersDayByDayActivity(publicApiBaseRequestV2MultipleUsersWithDates, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatsApi.listMultipleUsersDayByDayActivity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
/**
 * StatsApi - factory interface
 * @export
 */
export const StatsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = StatsApiFp(configuration);
    return {
        /**
         * Retrieve all the answers for the scorecards that were reviewed during a specified date range, for calls that took place during a specified date range, for specific scorecards or for specific reviewed users.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:scorecards\'.
         * @summary Retrieve answered scorecards for applicable reviewed users or scorecards for a date range (/v2/stats/activity/scorecards)
         * @param {StatsApiListAnsweredScorecardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnsweredScorecards(requestParameters, options) {
            return localVarFp.listAnsweredScorecards(requestParameters.publicApiBaseRequestV2AnsweredScorecardsFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns interaction stats for users based on calls that have Whisper turned on.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:interaction\'.
         * @summary Retrieve interaction stats for applicable users by date (/v2/stats/interaction)
         * @param {StatsApiListInteractionStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInteractionStats(requestParameters, options) {
            return localVarFp.listInteractionStats(requestParameters.publicApiBaseRequestV2MultipleUsersWithDates, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the activity of multiple users within the Gong system during a defined period. Given the period, this endpoint returns multiple records, one for each user, with an applicable activity during the period. Each record includes statistics about the user\'s activity.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions\'.
         * @summary Retrieve aggregated activity for defined users by date (/v2/stats/activity/aggregate)
         * @param {StatsApiListMultipleUsersAggregateActivityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultipleUsersAggregateActivity(requestParameters, options) {
            return localVarFp.listMultipleUsersAggregateActivity(requestParameters.publicApiBaseRequestV2MultipleUsersWithDates, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the aggregated activity of multiple users within the Gong system for each time period within the defined date range. This endpoint returns multiple records, one for each user. For each user there are items for every time period in the date range, including statistics about the user\'s activity. Records are returned only for users with activity in the range.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions\'.
         * @summary Retrieve aggregated activity for defined users by a date range with grouping in time periods (/v2/stats/activity/aggregate-by-period)
         * @param {StatsApiListMultipleUsersAggregateByPeriodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultipleUsersAggregateByPeriod(requestParameters, options) {
            return localVarFp.listMultipleUsersAggregateByPeriod(requestParameters.requestWithTimePeriod, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the daily activity of multiple users within the Gong system for a range of dates. This endpoint returns records including statistics about each user\'s activity, on the daily level. Records are returned only for users with activity in the range.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions:detailed\'.
         * @summary Retrieve daily activity for applicable users for a date range (/v2/stats/activity/day-by-day)
         * @param {StatsApiListMultipleUsersDayByDayActivityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultipleUsersDayByDayActivity(requestParameters, options) {
            return localVarFp.listMultipleUsersDayByDayActivity(requestParameters.publicApiBaseRequestV2MultipleUsersWithDates, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StatsApi - object-oriented interface
 * @export
 * @class StatsApi
 * @extends {BaseAPI}
 */
export class StatsApi extends BaseAPI {
    /**
     * Retrieve all the answers for the scorecards that were reviewed during a specified date range, for calls that took place during a specified date range, for specific scorecards or for specific reviewed users.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:scorecards\'.
     * @summary Retrieve answered scorecards for applicable reviewed users or scorecards for a date range (/v2/stats/activity/scorecards)
     * @param {StatsApiListAnsweredScorecardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    listAnsweredScorecards(requestParameters, options) {
        return StatsApiFp(this.configuration).listAnsweredScorecards(requestParameters.publicApiBaseRequestV2AnsweredScorecardsFilter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns interaction stats for users based on calls that have Whisper turned on.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:interaction\'.
     * @summary Retrieve interaction stats for applicable users by date (/v2/stats/interaction)
     * @param {StatsApiListInteractionStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    listInteractionStats(requestParameters, options) {
        return StatsApiFp(this.configuration).listInteractionStats(requestParameters.publicApiBaseRequestV2MultipleUsersWithDates, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the activity of multiple users within the Gong system during a defined period. Given the period, this endpoint returns multiple records, one for each user, with an applicable activity during the period. Each record includes statistics about the user\'s activity.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions\'.
     * @summary Retrieve aggregated activity for defined users by date (/v2/stats/activity/aggregate)
     * @param {StatsApiListMultipleUsersAggregateActivityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    listMultipleUsersAggregateActivity(requestParameters, options) {
        return StatsApiFp(this.configuration).listMultipleUsersAggregateActivity(requestParameters.publicApiBaseRequestV2MultipleUsersWithDates, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the aggregated activity of multiple users within the Gong system for each time period within the defined date range. This endpoint returns multiple records, one for each user. For each user there are items for every time period in the date range, including statistics about the user\'s activity. Records are returned only for users with activity in the range.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions\'.
     * @summary Retrieve aggregated activity for defined users by a date range with grouping in time periods (/v2/stats/activity/aggregate-by-period)
     * @param {StatsApiListMultipleUsersAggregateByPeriodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    listMultipleUsersAggregateByPeriod(requestParameters, options) {
        return StatsApiFp(this.configuration).listMultipleUsersAggregateByPeriod(requestParameters.requestWithTimePeriod, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve the daily activity of multiple users within the Gong system for a range of dates. This endpoint returns records including statistics about each user\'s activity, on the daily level. Records are returned only for users with activity in the range.  When accessed through a Bearer token authorization method, this endpoint requires the scope \'api:stats:user-actions:detailed\'.
     * @summary Retrieve daily activity for applicable users for a date range (/v2/stats/activity/day-by-day)
     * @param {StatsApiListMultipleUsersDayByDayActivityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    listMultipleUsersDayByDayActivity(requestParameters, options) {
        return StatsApiFp(this.configuration).listMultipleUsersDayByDayActivity(requestParameters.publicApiBaseRequestV2MultipleUsersWithDates, options).then((request) => request(this.axios, this.basePath));
    }
}
